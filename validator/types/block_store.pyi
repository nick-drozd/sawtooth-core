from sawtooth_validator.database.dict_database import DictDatabase
from sawtooth_validator.journal.block_wrapper import BlockWrapper
from sawtooth_validator.protobuf.batch_pb2 import Batch
from sawtooth_validator.protobuf.transaction_pb2 import Transaction
from typing import (
    Any,
    Callable,
    Dict,
    Iterator,
    List,
    Optional,
    Union,
)


class BlockStore:
    def __contains__(self, x: str) -> bool: ...
    def __getitem__(self, key: str) -> BlockWrapper: ...
    def __init__(self, block_db: DictDatabase) -> None: ...
    def __setitem__(self, key: str, value: Union[str, BlockWrapper]) -> None: ...
    @staticmethod
    def _batch_index_keys(block: BlockWrapper) -> List[bytes]: ...
    @staticmethod
    def _block_num_index_keys(block: BlockWrapper) -> List[bytes]: ...
    @staticmethod
    def _get_batch_from_block(
        block: BlockWrapper,
        batch_id: str
    ) -> Batch: ...
    def _get_block(self, key: str) -> BlockWrapper: ...
    @staticmethod
    def _get_txn_from_block(
        block: BlockWrapper,
        txn_id: str
    ) -> Transaction: ...
    @staticmethod
    def _transaction_index_keys(block: BlockWrapper) -> List[bytes]: ...
    @staticmethod
    def block_num_to_hex(block_num: int) -> str: ...
    @property
    def chain_head(self): ...
    @staticmethod
    def create_index_configuration() -> Dict[str, Callable]: ...
    def get_batch(self, batch_id: str) -> Batch: ...
    def get_batch_by_transaction(self, transaction_id: str) -> Batch: ...
    def get_block_by_batch_id(self, batch_id: str) -> BlockWrapper: ...
    def get_block_by_transaction_id(self, txn_id: str) -> BlockWrapper: ...
    def get_block_iter(
        self,
        start_block: Optional[BlockWrapper] = None,
        start_block_num: None = None,
        reverse: bool = True
    ) -> Iterator[BlockWrapper]: ...
    def get_predecessor_iter(
        self,
        starting_block: Optional[BlockWrapper] = None
    ) -> Iterator[Any]: ...
    def get_transaction(self, transaction_id: str) -> Transaction: ...
    def has_batch(self, batch_id: str) -> bool: ...
    def has_transaction(self, txn_id: str) -> bool: ...
    def update_chain(
        self,
        new_chain: List[BlockWrapper],
        old_chain: Optional[List[BlockWrapper]] = None
    ) -> None: ...
