from queue import Queue
from sawtooth_validator.database.dict_database import DictDatabase
from sawtooth_validator.execution.execution_context import ExecutionContext
from sawtooth_validator.protobuf.events_pb2 import Event
from typing import (
    Any,
    Callable,
    Dict,
    List,
    Tuple,
    Union,
)


class ContextManager:
    def __init__(self, database: DictDatabase) -> None: ...
    def _find_address_values_in_chain(self, base_contexts: List[str], addresses_to_find: List[str]) -> Any: ...
    def add_execution_data(self, context_id: str, data: bytes) -> bool: ...
    def add_execution_event(self, context_id: str, event: Event) -> bool: ...
    def address_is_valid(self, address: str) -> bool: ...
    def create_context(self, state_hash: str, base_contexts: List[str], inputs: List[str], outputs: List[str]) -> str: ...
    def delete(self, context_id: str, address_list: Union[List[str], Dict[str, NoneType]]) -> bool: ...
    def delete_contexts(self, context_id_list: List[str]) -> None: ...
    def get(
        self,
        context_id: str,
        address_list: List[str]
    ) -> Union[List[Tuple[str, NoneType]], List[Union[Tuple[str, NoneType], Tuple[str, bytes]]], List[Tuple[str, bytes]]]: ...
    def get_execution_results(
        self,
        context_id: str
    ) -> Tuple[Dict[str, bytes], Dict[str, NoneType], List[Event], List[bytes]]: ...
    def get_first_root(self) -> str: ...
    def get_squash_handler(self) -> Callable: ...
    def namespace_is_valid(self, namespace: str) -> bool: ...
    def set(self, context_id: str, address_value_list: List[Dict[str, bytes]]) -> bool: ...
    def stop(self) -> None: ...


class _ContextReader:
    def __init__(
        self,
        database: DictDatabase,
        address_queue: Queue,
        inflated_addresses: Queue
    ) -> None: ...


class _ContextWriter:
    def __init__(
        self,
        inflated_addresses: Queue,
        contexts: _ThreadsafeContexts
    ) -> None: ...


class _ThreadsafeContexts:
    def __contains__(self, item: str): ...
    def __delitem__(self, key: str) -> None: ...
    def __getitem__(self, item: str) -> ExecutionContext: ...
    def __init__(self) -> None: ...
    def __setitem__(self, key: str, value: ExecutionContext) -> None: ...
    def get(self, item: str): ...
